#+title: GNU Emacs Configuration
#+author: Sebastian Hempel Linde
#+email: sebastian@hempellinde.com

* =early-init.el=

#+begin_src emacs-lisp :tangle "early-init.el"
;;; early-init.el --- -*- lexical-binding: t -*-
;;; Commentary
;;; Code:
#+end_src

#+begin_src emacs-lisp :tangle "early-init.el"
;; Disable package.el
(setq package-enable-at-startup nil)
#+end_src

** Garbage Collection

#+begin_src emacs-lisp :tangle "early-init.el"
(setq gc-cons-percentage 0.6)
(setq gc-cons-threshold most-positive-fixnum)
#+end_src

** Initial Appearance

#+begin_src emacs-lisp :tangle "early-init.el"
(setq inhibit-startup-message t)

(setq default-frame-alist
      '((menu-bar-lines . 0)
	(tool-bar-lines . 0)
	(horizontal-scroll-bars)
	(vertical-scroll-bars)))
#+end_src

#+begin_src emacs-lisp :tangle "early-init.el"
(provide 'early-init)
;;; early-init.el ends here
#+end_src

* =init.el=

#+begin_src emacs-lisp :tangle "init.el"
;;; init.el --- -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:
#+end_src

** Variables

#+begin_src emacs-lisp :tangle "init.el"
(defconst my-emacs-d (file-name-as-directory user-emacs-directory)
  "Directory of emacs.d.")

(defconst my-site-lisp-dir (concat my-emacs-d "site-lisp")
  "Directory of site-lisp.")

(defconst my-lisp-dir (concat my-emacs-d "lisp")
  "Directory of personal configuration.")
#+end_src

** Module Loading

#+begin_src emacs-lisp :tangle "init.el"
(defun require-init (pkg &optional maybe-disabled)
  "Load PKG if MAYBE-DISABLED is nil or it's nil but start up in normal slowly."
  (when (or (not maybe-disabled) (not my-lightweight-mode-p))
    (load (file-truename (format "%s/%s" my-lisp-dir pkg)) t t)))
#+end_src

Load modules.

#+begin_src emacs-lisp :tangle "init.el"
  (let* ((file-name-handler-alist nil))
    (require-init 'shl-package)
    (require-init 'shl-startup)
    (require-init 'shl-appearance)
    (require-init 'shl-defaults)
    (require-init 'shl-minibuffer)
    (require-init 'shl-editing)
    (require-init 'shl-development)
    (require-init 'shl-vc)
    (require-init 'shl-python)
    (require-init 'shl-org)
    (require-init 'shl-misc))
#+end_src

* =shl/package=

#+begin_src emacs-lisp :tangle "lisp/shl-package.el"
;;; shl-package.el --- -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:

(require 'package)
(require 'cl-lib)

;; Add MELPA to package-archives
(add-to-list 'package-archives '( "melpa" . "https://melpa.org/packages/") t)
#+end_src

** Package Installation Functions

The following functions eases the installation of packages in two ways:
+ ~require-package~ makes it easier to install a package with ~min-version~ and to specify whether or not to refresh the package archives.
+ ~maybe-require-package~ is for packages that you want to install but are not necessary.

#+begin_src emacs-lisp :tangle "lisp/shl-package.el"
(defun require-package (package &optional min-version no-refresh)
  "Install given PACKAGE, optionally requiring MIN-VERSION.
If NO-REFRESH is non-nil, the available package lists will not be
re-downloaded in order to locate PACKAGE."
  (when (stringp min-version)
    (setq min-version (version-to-list min-version)))
  (or (package-installed-p package min-version)
      (let* ((known (cdr (assoc package package-archive-contents)))
             (best (car (sort known (lambda (a b)
                                      (version-list-<= (package-desc-version b)
                                                       (package-desc-version a)))))))
        (if (and best (version-list-<= min-version (package-desc-version best)))
            (package-install best)
          (if no-refresh
              (error "No version of %s >= %S is available" package min-version)
            (package-refresh-contents)
            (require-package package min-version t)))
        (package-installed-p package min-version))))

(defun maybe-require-package (package &optional min-version no-refresh)
  "Try to install PACKAGE, and return non-nil if successful.
In the event of failure, return nil and print a warning message.
Optionally require MIN-VERSION.  If NO-REFRESH is non-nil, the
available package lists will not be re-downloaded in order to
locate PACKAGE."
  (condition-case err
      (require-package package min-version no-refresh)
    (error
     (message "Couldn't install optional package `%s': %S" package err)
     nil)))
#+end_src

** =package.el= Initialization

#+begin_src emacs-lisp :tangle "lisp/shl-package.el"
(setq package-enable-at-startup nil)
(setq package-native-compile t)
(package-initialize)

;; package.el updates the saved version of package-selected-packages correctly only
;; after custom-file has been loaded, which is a bug. We work around this by adding
;; the required packages to package-selected-packages after startup is complete.

(defvar shl/required-packages nil)

(defun shl/note-selected-package (oldfun package &rest args)
  "If OLDFUN reports PACKAGE was successfully installed, note that fact.
The package name is noted by adding it to
`shl/required-packages'.  This function is used as an
advice for `require-package', to which ARGS are passed."
  (let ((available (apply oldfun package args)))
    (prog1
        available
      (when available
        (add-to-list 'shl/required-packages package)))))

(advice-add 'require-package :around 'shl/note-selected-package)


(when (fboundp 'package--save-selected-packages)
  (require-package 'seq)
  (add-hook 'after-init-hook
            (lambda ()
              (package--save-selected-packages
               (seq-uniq (append shl/required-packages package-selected-packages))))))


(let ((package-check-signature nil))
  (require-package 'gnu-elpa-keyring-update))
#+end_src

** Package Menu Customization

#+begin_src emacs-lisp :tangle "lisp/shl-package.el"
(defun shl/set-tabulated-list-column-width (col-name width)
  "Set any column with name COL-NAME to the given WIDTH."
  (when (> width (length col-name))
    (cl-loop for column across tabulated-list-format
             when (string= col-name (car column))
             do (setf (elt column 1) width))))

(defun shl/maybe-widen-package-menu-columns ()
  "Widen some columns of the package menu table to avoid truncation."
  (when (boundp 'tabulated-list-format)
    (shl/set-tabulated-list-column-width "Version" 13)
    (let ((longest-archive-name (apply 'max (mapcar 'length (mapcar 'car package-archives)))))
      (shl/set-tabulated-list-column-width "Archive" longest-archive-name))))

(add-hook 'package-menu-mode-hook 'shl/maybe-widen-package-menu-columns)
#+end_src

#+begin_src emacs-lisp :tangle "lisp/shl-package.el"
(provide 'shl-package)
;;; shl-package.el ends here
#+end_src

* =shl/startup=

#+begin_src emacs-lisp :tangle "lisp/shl-startup.el"
;;; shl-startup.el --- -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:

(require-package 'diminish)

(when (fboundp 'pixel-scroll-precision-mode)
  (pixel-scroll-precision-mode))
#+end_src

** Performance

#+begin_src emacs-lisp :tangle "lisp/shl-startup.el"
(when (require-package 'gcmh)
  (setq gcmh-high-cons-threshold (* 128 1024 1024))
  (add-hook 'after-init-hook (lambda ()
                               (gcmh-mode)
                               (diminish 'gcmh-mode))))

(setq jit-lock-defer-time 0)
#+end_src

#+begin_src emacs-lisp :tangle "lisp/shl-startup.el"
(provide 'shl-startup)
;;; shl-startup.el ends here
#+end_src

* =shl/appearance=

#+begin_src emacs-lisp :tangle "lisp/shl-appearance.el"
;;; shl-appearance.el --- -*- lexical-binding: t -*-
;;; Code:
;;; Commentary:
#+end_src

** Theme

#+begin_src emacs-lisp :tangle "lisp/shl-appearance.el"
;; Don't ask if theme is safe
(setopt custom-safe-themes t)

;; Install theme
(require-package 'ef-themes)

;; Customize ef-themes
(setq ef-themes-mixed-fonts t
      ef-themes-variable-pitch-ui t)



;; Modeline
(defun shl/ef-themes-mode-line ()
  "Tweak the style of the modeline"
  (ef-themes-with-colors
    (custom-set-faces
     `(mode-line ((,c :background ,bg-active :foreground ,fg-main :box (:line-width 1 :color ,fg-dim))))
     `(mode-linde-inactive ((,c box (:line-width 1 :color ,bg-active)))))))
(add-hook 'ef-themes-post-load-hook #'shl/ef-themes-mode-line)


;; Load theme (ef-themes-select also calls ef-themes-post-load-hook)
(ef-themes-select 'ef-deuteranopia-light)

;; Enabling toggling
(setq ef-themes-to-toggle '(ef-deuteranopia-light ef-deuteranopia-dark))
(global-set-key (kbd "C-c h t") 'ef-themes-toggle)

#+end_src

** Font

#+begin_src emacs-lisp :tangle "lisp/shl-appearance.el"
(push '(font . "Iosevka Comfy") default-frame-alist)
(set-face-font 'default "Iosevka Comfy")
(set-face-font 'variable-pitch "Iosevka Comfy")
(copy-face 'default 'fixed-pitch)
#+end_src

** Misc

#+begin_src emacs-lisp :tangle "lisp/shl-appearance.el"
(when (fboundp 'display-line-numbers-mode)
  (setq-default display-line-numbers-width 3)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  (add-hook 'org-mode-hook 'display-line-numbers-mode))

(when (boundp 'display-fill-column-indicator)
  (setq-default indicate-buffer-boundaries 'left)
  (setq-default display-fill-column-indicator-character ?â”Š)
  (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode))
#+end_src

** Modeline

#+begin_src emacs-lisp :tangle "lisp/shl-appearance.el"
(display-time-mode)
(display-battery-mode)
#+end_src

#+begin_src emacs-lisp :tangle "lisp/shl-appearance.el"
(provide 'shl-appearance)
;;; shl-appearance.el ends here
#+end_src

* =shl/defaults=

#+begin_src emacs-lisp :tangle "lisp/shl-defaults.el"
;;; shl-defaults.el --- -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:
#+end_src

** PATH

#+begin_src emacs-lisp :tangle "lisp/shl-defaults.el"
(require-package 'exec-path-from-shell)

(when (or (memq window-system '(mac ns x pgtk))
          (unless (memq system-type '(ms-dos windows-nt))
            (daemonp)))
  (exec-path-from-shell-initialize))
#+end_src

** Misc

#+begin_src emacs-lisp :tangle "lisp/shl-defaults.el"
(setq-default bookmark-default-file (locate-user-emacs-file ".bookmarks.el")
	      buffer-menu-max-size 30
	      case-fold-search t
	      column-number-mode t
	      indent-tabs-mode nil
	      create-lockfiles nil
	      auto-save-default nil
	      make-backup-files nil
	      vc-make-backup-files nil
	      save-interprogram-paste-before-kill t
	      scroll-preserve-screen-position 'always
              truncate-lines nil
              truncate-partial-width-windows nil)

;; Speed up font rendering for special characters
;; @see https://www.reddit.com/r/emacs/comments/988paa/emacs_on_windows_seems_lagging/
(setq inhibit-compacting-font-caches t)

;; GUI Frames
(setq use-file-dialog nil)
(setq use-dialog-box nil)

;; Savehist
(savehist-mode 1)



(require 'window)

(defun hsplit-last-buffer ()
  "Focus to the last created horizontal window."
  (interactive)
  (split-window-horizontally)
  (other-window 1))

(defun vsplit-last-buffer ()
  "Focus to the last created vertical window."
  (interactive)
  (split-window-vertically)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'vsplit-last-buffer)
(global-set-key (kbd "C-x 3") 'hsplit-last-buffer)

(global-set-key [remap kill-buffer] 'kill-this-buffer)
#+end_src

*** Hooks

#+begin_src emacs-lisp :tangle "lisp/shl-defaults.el"
(add-hook 'after-init-hook 'delete-selection-mode)

;; Automatically revert buffers when file changes on disk
(add-hook 'after-init-hook 'global-auto-revert-mode)
(setq global-auto-revert-non-file-buffers t
      auto-revert-verbose nil)
(with-eval-after-load 'autorevert
  (diminish 'auto-revert-mode))

;; Highlighted region is highlighted with the 'region' face
(add-hook 'after-init-hook 'transient-mark-mode)
#+end_src

#+begin_src emacs-lisp :tangle "lisp/shl-defaults.el"
(provide 'shl-defaults)
;;; shl-defaults.el ends here
#+end_src

* =shl/editing=

#+begin_src emacs-lisp :tangle "lisp/shl-editing.el"
;;; shl-editing.el --- -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:
#+end_src

** Defaults

#+begin_src emacs-lisp :tangle "lisp/shl-editing.el"
(when (fboundp 'electric-pair-mode)
  (add-hook 'after-init-hook 'electric-pair-mode))
(add-hook 'after-init-hook 'electric-indent-mode)

;; Newlines
(defun sanityinc/newline-at-end-of-line ()
  "Move to end of line, enter a newline, and reindent."
  (interactive)
  (move-end-of-line 1)
  (newline-and-indent))

(global-set-key (kbd "S-<return>") 'sanityinc/newline-at-end-of-line)

;; Subword-mode enables moving in CamelCase and snake_case
(add-hook 'after-init-hook 'subword-mode)
(with-eval-after-load 'subword
  (diminish 'subword-mode))
#+end_src

Using avy makes jumping around far more effective

#+begin_src emacs-lisp :tangle "lisp/shl-editing.el"
(when (maybe-require-package 'avy)
  (global-set-key (kbd "M-j") 'avy-goto-char-timer))
#+end_src

** Kill Ring

#+begin_src emacs-lisp :tangle "lisp/shl-editing.el"
(require-package 'browse-kill-ring)

(setq browse-kill-ring-separator "\f")
(global-set-key (kbd "M-Y") 'browse-kill-ring)

(with-eval-after-load 'browse-kill-ring
  (define-key browse-kill-ring-mode-map (kbd "C-g") 'browse-kill-ring-quit)
  (define-key browse-kill-ring-mode-map (kbd "M-n") 'browse-kill-ring-forward)
  (define-key browse-kill-ring-mode-map (kbd "M-p") 'browse-kill-ring-previous))
  
(with-eval-after-load 'page-break-lines
  (add-to-list 'page-break-lines-modes 'browse-kill-ring-mode))
#+end_src



#+begin_src emacs-lisp :tangle "lisp/shl-editing.el"
(provide 'shl-editing)
;;; shl-editing.el ends here
#+end_src

* =shl/org=

#+begin_src emacs-lisp :tangle "lisp/shl-org.el"
  ;;; shl-org.el --- -*- lexical-binding: t -*-
  ;;; Commentary:
  ;;; Code:
(require-package 'org)

(maybe-require-package 'org-cliplink)
#+end_src

** Bindings

#+begin_src emacs-lisp :tangle "lisp/shl-org.el"
(define-key global-map (kbd "C-c l") 'org-store-link)
(define-key global-map (kbd "C-c c") 'org-capture)
(define-key global-map (kbd "C-c a") 'org-agenda)

(with-eval-after-load 'org
  (define-key org-mode-map [remap goto-line] 'consult-org-heading))

;; Org Prefix Map
(defvar shl/org-global-prefix-map (make-sparse-keymap)
  "A keymap for global access to org helpers.")

(define-key shl/org-global-prefix-map (kbd "j") 'org-clock-goto)
(define-key shl/org-global-prefix-map (kbd "l") 'org-clock-in-last)
(define-key shl/org-global-prefix-map (kbd "i") 'org-clock-in)
(define-key shl/org-global-prefix-map (kbd "o") 'org-clock-out)
(define-key global-map (kbd "C-c o") shl/org-global-prefix-map)
#+end_src

** Settings

#+begin_src emacs-lisp :tangle "lisp/shl-org.el"
(setq org-log-done t
      org-edit-timestamp-down-means-later t
      org-hide-emphasis-markers t
      org-catch-invisible-edits 'show
      org-export-coding-system 'utf-8
      org-fast-tag-selection-single-key 'expert
      org-html-validation-link nil
      org-export-kill-product-buffer-when-displayed t
      org-tags-column 80)

(setq org-directory "/home/slinde/org/")
(setq org-default-notes-file (concat org-directory "inbox.org"))

;; Pomodoro
(require-package 'org-pomodoro)
(setq org-pomodoro-keep-killed-pomodoro-time t)
(with-eval-after-load 'org-agenda
  (define-key org-agenda-mode-map (kbd "P") 'org-pomodoro))
#+end_src

** Capture

#+begin_src emacs-lisp :tangle "lisp/shl-org.el"
(setq org-capture-templates
      `(("t" "todo" entry (file "")  ; "" => `org-default-notes-file'
         "* NEXT %?\n%U\n" :clock-resume t)
        ("n" "note" entry (file "")
         "* %? :NOTE:\n%U\n%a\n" :clock-resume t)
        ))
#+end_src

** Refiling

#+begin_src emacs-lisp :tangle "lisp/shl-org.el"
(setq org-refile-use-cache nil)

;; Targets include this file and any file contributing to the agenda - up to 5 levels deep
(setq org-refile-targets '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5)))

(with-eval-after-load 'org-agenda
  (add-to-list 'org-agenda-after-show-hook 'org-show-entry))

(advice-add 'org-refile :after (lambda (&rest _) (org-save-all-org-buffers)))

;; Exclude DONE state tasks from refile targets
(defun shl/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets."
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))
(setq org-refile-target-verify-function 'shl/verify-refile-target)

;; Targets start with the file name - allows creating level 1 tasks
;;(setq org-refile-use-outline-path (quote file))
(setq org-refile-use-outline-path t)
(setq org-outline-path-complete-in-steps nil)

;; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+end_src

** Todo Settings

#+begin_src emacs-lisp :tangle "lisp/shl-org.el"
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
              (sequence "PROJECT(p)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")
              (sequence "WAITING(w@/!)" "DELEGATED(e!)" "HOLD(h)" "|" "CANCELLED(c@/!)")))
      org-todo-repeat-to-state "NEXT")

(setq org-todo-keyword-faces
      (quote (("NEXT" :inherit warning)
              ("PROJECT" :inherit font-lock-string-face))))

#+end_src

** Agenda

#+begin_src emacs-lisp :tangle "lisp/shl-org.el"
;; Re-align tags when window shape changes
(with-eval-after-load 'org-agenda
  (add-hook 'org-agenda-mode-hook
            (lambda () (add-hook 'window-configuration-change-hook 'org-agenda-align-tags nil t))))


(setq-default org-agenda-clockreport-parameter-plist '(:link t :maxlevel 3))

;; Views
(let ((active-project-match "-INBOX/PROJECT"))

  (setq org-stuck-projects
        `(,active-project-match ("NEXT")))

  (setq org-agenda-compact-blocks t
        org-agenda-sticky t
        org-agenda-start-on-weekday nil
        org-agenda-span 'day
        org-agenda-include-diary nil
        org-agenda-sorting-strategy
        '((agenda habit-down time-up user-defined-up effort-up category-keep)
          (todo category-up effort-up)
          (tags category-up effort-up)
          (search category-up))
        org-agenda-window-setup 'current-window
        org-agenda-custom-commands
        `(("N" "Notes" tags "NOTE"
           ((org-agenda-overriding-header "Notes")
            (org-tags-match-list-sublevels t)))
          ("g" "GTD"
           ((agenda "" nil)
            (tags "INBOX"
                  ((org-agenda-overriding-header "Inbox")
                   (org-tags-match-list-sublevels nil)))
            (stuck ""
                   ((org-agenda-overriding-header "Stuck Projects")
                    (org-agenda-tags-todo-honor-ignore-options t)
                    (org-tags-match-list-sublevels t)
                    (org-agenda-todo-ignore-scheduled 'future)))
            (tags-todo "-INBOX"
                       ((org-agenda-overriding-header "Next Actions")
                        (org-agenda-tags-todo-honor-ignore-options t)
                        (org-agenda-todo-ignore-scheduled 'future)
                        (org-agenda-skip-function
                         '(lambda ()
                            (or (org-agenda-skip-subtree-if 'todo '("HOLD" "WAITING"))
                                (org-agenda-skip-entry-if 'nottodo '("NEXT")))))
                        (org-tags-match-list-sublevels t)
                        (org-agenda-sorting-strategy
                         '(todo-state-down effort-up category-keep))))
            (tags-todo ,active-project-match
                       ((org-agenda-overriding-header "Projects")
                        (org-tags-match-list-sublevels t)
                        (org-agenda-sorting-strategy
                         '(category-keep))))
            (tags-todo "-INBOX/-NEXT"
                       ((org-agenda-overriding-header "Orphaned Tasks")
                        (org-agenda-tags-todo-honor-ignore-options t)
                        (org-agenda-todo-ignore-scheduled 'future)
                        (org-agenda-skip-function
                         '(lambda ()
                            (or (org-agenda-skip-subtree-if 'todo '("PROJECT" "HOLD" "WAITING" "DELEGATED"))
                                (org-agenda-skip-subtree-if 'nottododo '("TODO")))))
                        (org-tags-match-list-sublevels t)
                        (org-agenda-sorting-strategy
                         '(category-keep))))
            (tags-todo "/WAITING"
                       ((org-agenda-overriding-header "Waiting")
                        (org-agenda-tags-todo-honor-ignore-options t)
                        (org-agenda-todo-ignore-scheduled 'future)
                        (org-agenda-sorting-strategy
                         '(category-keep))))
            (tags-todo "/DELEGATED"
                       ((org-agenda-overriding-header "Delegated")
                        (org-agenda-tags-todo-honor-ignore-options t)
                        (org-agenda-todo-ignore-scheduled 'future)
                        (org-agenda-sorting-strategy
                         '(category-keep))))
            (tags-todo "-INBOX"
                       ((org-agenda-overriding-header "On Hold")
                        (org-agenda-skip-function
                         '(lambda ()
                            (or (org-agenda-skip-subtree-if 'todo '("WAITING"))
                                (org-agenda-skip-entry-if 'nottodo '("HOLD")))))
                        (org-tags-match-list-sublevels nil)
                        (org-agenda-sorting-strategy
                         '(category-keep))))
            ;; (tags-todo "-NEXT"
            ;;            ((org-agenda-overriding-header "All other TODOs")
            ;;             (org-match-list-sublevels t)))
            )))))

(add-hook 'org-agenda-mode-hook 'hl-line-mode)
#+end_src

** Clock

#+begin_src emacs-lisp :tangle "lisp/shl-org.el"
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(with-eval-after-load 'org
  (org-clock-persistence-insinuate))
(setq org-clock-persist t)
(setq org-clock-in-resume t)

;; Save clock data and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Save state changes in the LOGBOOK drawer
(setq org-log-into-drawer t)
;; Removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)

;; Show clock sums as hours and minutes, not "n days" etc.
(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

;;; Show the clocked-in task - if any - in the header line
(defun shl/show-org-clock-in-header-line ()
  (setq-default header-line-format '((" " org-mode-line-string " "))))

(defun shl/hide-org-clock-from-header-line ()
  (setq-default header-line-format nil))

(add-hook 'org-clock-in-hook 'shl/show-org-clock-in-header-line)
(add-hook 'org-clock-out-hook 'shl/hide-org-clock-from-header-line)
(add-hook 'org-clock-cancel-hook 'shl/hide-org-clock-from-header-line)

(with-eval-after-load 'org-clock
  (define-key org-clock-mode-line-map [header-line mouse-2] 'org-clock-goto)
  (define-key org-clock-mode-line-map [header-line mouse-1] 'org-clock-menu))
#+end_src


** Appearance

#+begin_src emacs-lisp :tangle "lisp/shl-org.el"
;; Install org-modern
(maybe-require-package 'org-modern)

;; Settings
(setopt org-auto-align-tags nil
	org-tags-column 0
	org-catch-invisible-edits 'show-and-error
	org-special-ctrl-a/e t
	org-insert-heading-respect-content t
	org-hide-emphasis-markers t
	org-pretty-entities t
	org-ellipsis "â€¦")

;; Enable org-modern
(global-org-modern-mode)
#+end_src

** Org Babel

#+begin_src emacs-lisp :tangle "lisp/shl-org.el"
(setopt org-confirm-babel-evaluate nil)
(setopt org-src-window-setup 'current-window)
(setopt org-edit-src-persistent-message nil)
(setopt org-src-fontify-natively t)
(setopt org-src-preserve-indentation t)
(setopt org-src-tab-acts-natively t)
(setopt org-edit-src-content-indentation 0)


(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   (seq-filter
    (lambda (pair)
      (locate-library (concat "ob-" (symbol-name (car pair)))))
    '((R . t)
      (ditaa . t)
      (dot . t)
      (emacs-lisp . t)
      (gnuplot . t)
      (latex . t)
      (ledger . t)
      (octave . t)
      (plantuml . t)
      (python . t)
      (screen . nil)
      (sh . t) ;; obsolete
      (shell . t)
      (sql . t)
      (sqlite . t)))))
#+end_src

#+begin_src emacs-lisp :tangle "lisp/shl-org.el"
(provide 'shl-org)
;;; shl-org.el ends here
#+end_src

* =shl-minibuffer=

#+begin_src emacs-lisp :tangle "lisp/shl-minibuffer.el"
;;; shl-minibuffer.el --- -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:
#+end_src

** Completion

#+begin_src emacs-lisp :tangle "lisp/shl-minibuffer.el"
;; Vertico and friends
(when (maybe-require-package 'vertico)
  (add-hook 'after-init-hook 'vertico-mode)


  ;; Embark
  (when (maybe-require-package 'embark)
    (with-eval-after-load 'vertico
      (define-key vertico-map (kbd "C-c C-o") 'embark-export)
      (define-key vertico-map (kbd "M-.") 'embark-act)))

  ;; Consult
  (when (maybe-require-package 'consult)
    (global-set-key [remap switch-to-buffer] 'consult-buffer)
    (global-set-key [remap switch-to-buffer-other-window] 'consult-buffer-other-window)
    (global-set-key [remap switch-to-buffer-other-frame] 'consult-buffer-other-frame)
    (global-set-key [remap goto-line] 'consult-goto-line)

    ;; Embark-Consult
    (when (maybe-require-package 'embark-consult)
      (with-eval-after-load 'embark
	(require 'embark-consult)
	(add-hook 'embark-collect-mode-hook 'embark-consult-preview-minor-mode))))

  ;; Marginalia
  (when (maybe-require-package 'marginalia)
    (add-hook 'after-init-hook 'marginalia-mode)))
#+end_src

** Which-key

#+begin_src emacs-lisp :tangle "lisp/shl-minibuffer.el"
(when (maybe-require-package 'which-key)
  (add-hook 'after-init-hook 'which-key-mode)
  (setq-default which-key-idle-delay 0.3)

  (with-eval-after-load 'which-key
    (diminish 'which-key-mode)))
#+end_src

#+begin_src emacs-lisp :tangle "lisp/shl-minibuffer.el"
(provide 'shl-minibuffer)
;;; shl-minibuffer.el ends here
#+end_src

* Version Control

#+begin_src emacs-lisp :tangle "lisp/shl-vc.el"
;;; shl-vc.el --- -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:
#+end_src

** Magit 

#+begin_src emacs-lisp :tangle "lisp/shl-vc.el"
(when (maybe-require-package 'magit)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x M-g") 'magit-dispatch))

;; Show source file TODO in magit
(maybe-require-package 'magit-todo)

;; Good commit style
(maybe-require-package 'git-commit)
#+end_src

** Git Configuration Files

#+begin_src emacs-lisp :tangle "lisp/shl-vc.el"
(require-package 'git-modes)
(when (maybe-require-package 'git-timemachine)
  (global-set-key (kbd "C-x v t") 'git-timemachine-toggle))
#+end_src

#+begin_src emacs-lisp :tangle "lisp/shl-vc.el"
(provide 'shl-vc)
;;; shl-vc.el ends here
#+end_src

* Development

#+begin_src emacs-lisp :tangle "lisp/shl-development.el"
;;; shl-development.el --- -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:
#+end_src

** TreeSitter

#+begin_src emacs-lisp :tangle "lisp/shl-development.el"
(when (maybe-require-package 'treesit-auto)
  (require 'treesit-auto)
  (setopt treesit-auto-install 'prompt)
  (global-treesit-auto-mode))
#+end_src

** LSP

#+begin_src emacs-lisp :tangle "lisp/shl-development.el"
  (when (maybe-require-package 'eglot)
    (maybe-require-package 'consult-eglot))
#+end_src

** AutoComplete

*** Corfu

#+begin_src emacs-lisp :tangle "lisp/shl-development.el"
(setq tab-always-indent 'complete)

(when (maybe-require-package 'orderless)
  (with-eval-after-load 'vertico
    (require 'orderless)
    (setq completion-styles '(orderless basic))))

(setq completion-category-defaults nil
      completion-category-overrides nil)
(setq completion-cycle-threshold 4)

(when (maybe-require-package 'corfu)

  ;; Customize Corfu
  (setq global-corfu-modes '((not erc-mode
                                  circe-mode
                                  help-mode
                                  gud-mode
                                  eat-mode)
                             t)
        corfu-auto t
        corfu-auto-delay 0.1
        corfu-auto-prefix 1
        corfu-cycle t
        corfu-separator ?\s
        corfu-preselect 'first
        corfu-count 16
        corfu-max-width 120
        corfu-preview-current nil
        corfu-on-exact-match nil
        corfu-quit-at-boundary 'separator
        corfu-quit-no-match 'separator)
  (setq-default corfu-quit-no-match 'separator)
  (add-hook 'after-init-hook 'global-corfu-mode)

  ;; Rebinding keys
  (with-eval-after-load 'corfu
    (define-key corfu-map (kbd "C-y") 'corfu-insert)
    (define-key corfu-map (kbd "RET") nil))


  ;; Corfu when running Emacs in terminal
  ;; (when (maybe-require-package 'corfu-terminal)
  ;;   (with-eval-after-load 'corfu
  ;;     (corfu-terminal-mode)))

  (require-package 'cape)
  (add-hook 'prog-mode-hook (defun shl/corfu-add-cape-file-h ()
                              (add-hook 'completion-at-point-function #'cape-file -10 t)))
  (add-hook 'org-mode-hook (defun shl/corfu-add-cape-elisp-block-h ()
                             (add-hook 'completion-at-point-functions #'cape-elisp-block 0 t)))

  ;; Corfu history
  (with-eval-after-load 'corfu
    (require 'corfu-history)
    (add-hook 'corfu-mode-hook 'corfu-history-mode)

    (with-eval-after-load 'savehist
      (add-to-list 'savehist-additional-variables 'corfu-history)))

  ;; Popopinfo
  (with-eval-after-load 'corfu
    (require 'corfu-popupinfo)
    (add-hook 'corfu-mode-hook 'corfu-popupinfo-mode)
    (setq corfu-popupinfo-delay '(0.5 . 1.0))))
#+end_src

*** Kind-icon

#+begin_src emacs-lisp :tangle "lisp/shl-development.el"
(when (maybe-require-package 'kind-icon)
  (with-eval-after-load 'corfu
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))
#+end_src

#+begin_src emacs-lisp :tangle "lisp/shl-development.el"
(provide 'shl-development)
;;; shl-development.el ends here
#+end_src

* Languages

** Python

#+begin_src emacs-lisp :tangle "lisp/shl-python.el"
;;; shl-python.el --- -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:
#+end_src

#+begin_src emacs-lisp :tangle "lisp/shl-python.el"
(require-package 'python)
(setq python-indent-guess-indent-offset-verbose nil)
(setq python-check-command "NO_COLOR=1 rye check")
(setq python-indent-guess-indent-offset-verbose nil)
(setq python-fill-docstring-style 'django)
(add-hook 'python-mode-hook #'flymake-mode)
(add-hook 'python-ts-mode-hook #'flymake-mode)
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt --InteractiveShell.display_page=True")

(add-hook 'python-ts-hook 'eglot-ensure)

(when (maybe-require-package 'envrc)
  (with-eval-after-load 'envrc
    (define-key envrc-mode-map (kbd "C-c e") 'envrc-command-map))
  (add-hook 'after-init-mode 'envrc-global-mode))

(when (maybe-require-package 'pet)
  (add-hook 'python-base-mode-hook 'pet-mode -10))
#+end_src

#+begin_src emacs-lisp :tangle "lisp/shl-python.el"
(provide 'shl-python)
;;; shl-python.el ends here
#+end_src

* Misc

** PDF

#+begin_src emacs-lisp :tangle "lisp/shl-misc.el"
(maybe-require-package 'pdf-tools)
#+end_src
